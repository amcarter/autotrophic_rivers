---
title: "Untitled"
author: "Alice Carter"
date: "4/1/2022"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_knit$set(root.dir = '\\\\wsl.localhost/Ubuntu/home/alice/git/autotrophic_rivers/src/')
setwd('\\\\wsl.localhost/Ubuntu/home/alice/git/autotrophic_rivers/src/')
library(tidyverse)
library(rstan)
getwd()
source('stan_helpers.R', local = knitr::knit_global())
```

### Stochastic antecedent model of Ecosystem Respiration with carbon modeled as a latent state.
With components based on Ogle et al 2015 and Segatto et al 2021

### Data

Read in some data from a set of autotrophic rivers to use as drivers for simulations

```{r}
dat <- read_csv('../data/daily_sensor_and_nwis_data_auto.csv')
dd <- dat %>%
  select(sitecode, date, variable, value) %>%
  pivot_wider(names_from = variable, values_from = value)

sites <- unique(dd$sitecode) 

md <- read_csv('../data/autotrophic_siteyears_daily_filled_data.csv')
md <- filter(md, sitecode %in% sites)

dd <- select(md, sitecode, Name, date = Date, DOY, 
             GPP_C_filled, ER_C_filled, slope) %>%
  left_join(dd, by = c('sitecode', 'date'))
ss <- dd %>%
  filter(sitecode == sites[6]) %>%
  # ggplot(aes(date, GPP_C_filled)) + geom_line() 
  arrange(date) %>%
  select(sitecode, Name, date, DOY, GPP_C = GPP_C_filled, ER_C = ER_C_filled, 
         depth = Depth_m, discharge = Discharge_m3s, DO_mgL, light = Light_PAR,
         temp_C = WaterTemp_C, slope) %>%
  mutate(across(c(-sitecode, -Name, -date, -DOY), zoo::na.approx, na.rm = F),
         litter = case_when(DOY >= 288 & DOY <= 307 ~ 25,
                            TRUE ~ 0),
         tau_mgm2 = 10^3 * depth * slope,
         light = light/max(light)) 

# Set litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d

ss %>%
  select(date, temp = temp_C, discharge, GPP_C, litter) %>%
  pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
  ggplot(aes(date, value, col = variable)) +
  geom_line() +
  facet_wrap(.~variable, nrow = 4, scales = 'free_y')

```

### Model Equations

To determine the role of past primary productivity $(P)$in driving ecosystem respiration $(R)$, we will model respiration as the sum of three component parts, autotrophic respiration $(AR)$, heterotrophic respiration of algal biomass $(HR_A)$, and heterotrophic respiration of allochthonous carbon $(HR_D)$. Autotrophic respiration here is defined as the respiration by autotrophs and their closely associated heterotrophs and is set as a known fraction of primary productivity (Hall and Beaulieu 2013). We will track allochthonous carbon by modeling a latent detrital carbon pool $(C)$ with the assumption of first order decay of detrital material in this pool. Because we are interested in determining important timescales of ecological memory of productivity, instead of modeling an algal carbon pool (which would not retain information about *when* in the past it was fixed) we will model respiration of algal biomass as a function of different intervals of past primary productivity.

#### Version: SAM_detC_1

\[R(t) = AR(t) + HR_A(t) + HR_D(t)\]
\[AR(t) = AR_f \cdot P(t)\]

#### Latent Carbon Model:
\[HR_D(t) = K(t) \cdot C(t)\]
\[K(t) = K_{20} \cdot e ^ {\frac{E_a}{k_b}(\frac{1}{T(t)} - \frac{1}{293})}\] 
\[C(t) = (C(t-1)\times(1 - \beta_s S(t)) + HR_D(t-1) + L(t)) \times \epsilon(t)\]
\[S(t) = (\frac{\tau(t) - \tau_0}{\tau_{max} - tau_0})^2\]
\[\tau(t) = \gamma_w \cdot r(t) \cdot slope\]
\[\epsilon(t) \sim logNormal(0, \sigma_{proc})\]

Where allochthonous carbon inputs through litterfall $(L)$ are a fixed seasonal input to the system and the scour of detrital carbon $(S)$ is a function of the shear stress $(\tau)$ calculated using the speficic density of water $(\gamma_w)$, the hydraulic radius $(r)$ and the stream bed slope. 

#### Stochastic Antecedent Model:

\[HR_A(t) = \beta_p \cdot \sum_{j=1}^N P(t-j) * \omega_j\]
\[0 \leq \omega \leq 1, \sum_j \omega_j = 1\]

#### Observation model:

\[R_{obs}(t) \sim N(R(t), \sigma_{obs})\]

#### Priors on parameters

\(C_0 \sim \), The initial detrital C in the system
\(C_t \sim \), Detrital carbon at each timestep  
\(K_{20} \sim \), The carbon decay rate at 20 C  
\(\beta_s \sim \), The coefficient on scour as a function of shear stress  
\(\tau_0 \sim \), The minimum shear stress required for bed disturbance  
\(\beta_p \sim \), The coefficient on antecedent primary P  
\(\omega \sim dirichlet(1,1,...,1)\), Simplex coefficient on varying intervals of antecedent P  
\(\sigma_{proc} \sim\), Process error  
\(\sigma_{obs} \sim\), Observation error  


#### Constants

\(AR_f = 0.44\), The fraction of \(P\) that is respired by autotrophic respiration  
\(E_a = 0.63 eV\), The activation energy for carbon decay  
\(k_b = 8.6173 \cdot 10^{-5} eV/K\), Boltzmann's constant

Future version to do list:
1. incorporate missing data structure
2. use log R and P
3. integrate over different antecedent periods for SAM model
4. Add a model for P
5. add a loss term for C
6. add litter as a function of LAI and terrestrial NPP
7. Compare complete vs partial pooling of C across days 
  - what about having a prior for C drawn from a distribution centered on $C_{t-1}$

#### Data Simulation
```{r}

ndays <- nrow(ss) # number of days
nweight = 5       # number of antecedent intervals

# define parameters
C0 = 100
K20 = .01      # Heterotrophic respiration at 20 C
beta_s = 0.8   # Percent removal of organic carbon from max storm
tau0 = quantile(ss$tau_mgm2, .75)
beta_p = .5
w = rep(1/nweight, nweight)
sigma_proc = .01 # lognormally distributed, so this is a % error
sigma_obs = 0.08 

# Constants
Ea = 0.63              # activation energy for heterotrophic respiration
k_b = 8.6173 * 10^-5  # Boltzmann's constant in eV/K
ARf = 0.44              # the fraction of GPP respired by autotrophs

# Process Model:
# Antecedent Productivity:
Pant = ss$GPP_C

for (i in (nweight+1):ndays){
  Pvec <- numeric(nweight)
  for(j in 1:nweight){
    Pvec[j] <- w[j]*ss$GPP_C[i-j]
  }
  Pant[i]<-sum(Pvec)
}

# Calculate shear stress ratio as a function of the minimum stress to cause a disturbance
ss$ss = if_else(ss$tau_mgm2 >= tau0, ((ss$tau_mgm2 - tau0)/(max(ss$tau_mgm2) - tau0))^2, 0)
ss$K = K20 * exp(Ea/k_b *(1/(ss$temp_C + 273) - 1/293))
ss$C = rep(C0, ndays)
ss$AR = -ARf * ss$GPP_C
ss$HR_d = rep(-ss$K[1] * C0, ndays)
ss$HR_p = rep(-beta_p * ss$GPP_C[1], ndays)

Chat = numeric()
Chat[1] = C0

for(i in 2:ndays){
  Chat[i] = Chat[i-1] * (1 - beta_s * ss$ss[i]) + ss$HR_d[i-1] + ss$litter[i]
  ss$C[i] = exp(rnorm(1, log(Chat[i]), sigma_proc))
  ss$HR_d[i] = -ss$K[i] * ss$C[i]
  ss$HR_p[i] = -beta_p * Pant[i]
}

# observation model:
ss$R = ss$AR + ss$HR_d + ss$HR_p 
ss$R_obs = rnorm(ndays, ss$R, sigma_obs)

ss %>% select(date, GPP_C, discharge, R, C, HR_p, HR_d, AR, litter )%>%
pivot_longer( -date, names_to = 'var', values_to = 'value') %>%
  ggplot(aes(date, value, col = var)) +
  geom_line()+
  facet_wrap(.~var, scales = 'free_y', ncol = 2)
S <- ss

```

### Stan Code

```{r, comment='', echo = FALSE}
cat(read_lines('SAM/stan/SAM_detC_1.stan'), sep = '\n')
```

```{r, eval = FALSE}
ss <- ss[1:30,]
stan_dat <- list(ndays = nrow(ss), nweights = nweight, 
                 R_obs = ss$ER_C, P = ss$GPP_C, C0 = 100, 
                 temp = ss$temp_C, tau = ss$tau_mgm2, litter = ss$litter)

mod <- stan('SAM/stan/SAM_detC_1.stan', 
             data = stan_dat, 
             chains = 4,  cores = 4, 
             warmup = 500, iter = 1000)
saveRDS(mod, 'SAM/stan/fits/SAM_detC_1_potomac.rds')
```

un Stan model ####
```{r, echo = FALSE}
mod <- readRDS('SAM/stan/fits/SAM_detC_1_potomac.rds')
print(mod, pars = c('C0', 'K_20', 'beta_s', 'tau0', 'beta_p', 'w', 
                    'sigma_obs', 'sigma_proc'))
traceplot(mod, ncol = 2, pars=c( 'beta_s', 'tau0', 'beta_p', 'w', 
                    'sigma_obs', 'sigma_proc'))
plot_post_sim(mod, pars = c( 'beta_s', 'tau0', 'beta_p', 'w', 
                    'sigma_obs', 'sigma_proc'), 
              vals = c( beta_s, tau0, beta_p, w, sigma_obs, sigma_proc))
```

l/model_runs/simulated_ss_ER.rds')


```{r}
fit <- summary(mod2)
modC <- fit$summary[4:363,1] 
modC_sd <- fit$summary[4:363,3]

plot(cbp$date, C, type = 'l', ylab = 'Carbon (g/m2)', xlab = 'Date')
points(cbp$date, modC, col = 'steelblue', pch = 19)
polygon(c(cbp$date, rev(cbp$date)), c(modC - modC_sd, rev(modC + modC_sd)), 
        col = alpha('steelblue', 0.3), border = NA)
legend('topleft', c('underlying state', 'modeled'), 
       lty = c(1,0), pch = c(NA,19), col = c('black', 'steelblue'), bty = 'n')

```



## Model run on NHC data

```{r, eval = FALSE}
stan_dat <- list(N = nrow(cbp), R_obs = cbp$ER, P_obs = cbp$GPP, 
                 tempK = cbp$tempK, Q = cbp$discharge/max(cbp$discharge), 
                 litter = cbp$litter, C0 = 200)

cbp_mod <- stan('src/model/stan/ss_ER.stan',
                data = stan_dat, init = 0,
                chains = 4, cores = 4, 
                warmup = 500, iter = 2000)

```

```{r, echo = FALSE}
# saveRDS(cbp_mod, 'src/model/model_runs/cbp_ss_ER.rds')
cbp_mod <- readRDS('src/model/model_runs/cbp_ss_ER.rds')
print(cbp_mod, pars = c('beta', 'sigma_obs', 'sigma_proc'))
traceplot(cbp_mod, ncol = 1, pars=c('beta', 'sigma_obs', 'sigma_proc'))
```


```{r}
fit <- summary(cbp_mod)
modC <- fit$summary[4:363,1] 
modC_sd <- fit$summary[4:363,3]
mod_R <- -AR * cbp$GPP - K20* exp(-E/k_b*(1/cbp$tempK - 1/293)) * modC
mod_R <- rnorm(length(mod_R), mod_R, fit$summary[3,1])

cbp_ests <- cbp %>%
  mutate(C_modeled = modC, ER_modeled = mod_R, 
         GPP_modeled = NA_real_, C_measured = NA_real_) %>%
  rename(ER_measured = ER, GPP_measured = GPP) 
cbp_ests%>%
  pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
               names_sep = '_', values_to = 'value') %>%
  ggplot(aes(date, value, col = est)) +
  geom_line() +
  facet_wrap(.~variable, scales = 'free', ncol = 1)

```

## Missing data model run on NHC data

```{r, eval = FALSE}
cbp_miss <- mutate(cbp_miss, miss_vec = ifelse(is.na(ER),1,0))

stan_dat <- list(N = nrow(cbp_miss), R_obs = zoo::na.approx(cbp_miss$ER),
                 P_obs = cbp_miss$GPP, tempK = cbp_miss$tempK, 
                 Q = cbp_miss$discharge/max(cbp_miss$discharge), 
                 litter = cbp_miss$litter, C0 = 200,
                 miss_vec = cbp_miss$miss_vec)

cbp_miss_mod <- stan('src/model/stan/ss_ER_missingdata.stan',
                     data = stan_dat, init = 0,
                     chains = 4, cores = 4,
                     warmup = 500, iter = 1000)

```

```{r, echo = FALSE}
# saveRDS(cbp_miss_mod, 'src/model/model_runs/cbp_ss_ER_missingdata.rds')
cbp_miss_mod <- readRDS('src/model/model_runs/cbp_ss_ER_missingdata.rds')
print(cbp_miss_mod, pars = c('beta', 'sigma_obs', 'sigma_proc'))
traceplot(cbp_miss_mod, ncol = 1, pars=c('beta', 'sigma_obs', 'sigma_proc'))
```


```{r}
fit <- summary(cbp_miss_mod)
modC <- fit$summary[4:363,1] 
modC_sd <- fit$summary[4:363,3]
mod_R <- -AR * cbp_miss$GPP - K20* exp(-E/k_b*(1/cbp_miss$tempK - 1/293)) * modC
mod_R <- rnorm(length(mod_R), mod_R, fit$summary[3,1])

cbp_ests <- cbp_miss %>%
  mutate(C_modeled = modC, ER_modeled = mod_R, 
         GPP_modeled = NA_real_, C_measured = NA_real_) %>%
  rename(ER_measured = ER, GPP_measured = GPP) 
cbp_ests%>%
  pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
               names_sep = '_', values_to = 'value') %>%
  ggplot(aes(date, value, col = est)) +
  geom_line() +
  facet_wrap(.~variable, scales = 'free', ncol = 1)

```



### Compare predictions today and in 1970

```{r}
hall_dat <- read_csv('data/hall/hall_discharge_temp_daily.csv')
light <- cbp %>% mutate(doy = as.numeric(format(date, '%j'))) %>%
  select(doy, PAR_surface) %>%
  group_by(doy) %>%
  summarize(PAR_surface = mean(PAR_surface, na.rm = T))
hall_dat <- hall_dat %>%
  mutate(doy = as.numeric(format(date, '%j')),
         litter = case_when(doy >= 278 &
                              doy <= 297 ~ 25,
                            TRUE ~ 0),
         logQ = log(discharge_m3s)) %>%
  left_join(light, by = 'doy') %>%
  select(-notes) %>%
  mutate(across(-date, zoo::na.approx, na.rm = F)) %>% 
  slice(1:836)


N <- nrow(hall_dat)
light = zoo::na.approx(hall_dat$PAR_surface/max(hall_dat$PAR_surface, na.rm = T), na.rm = F)
Q = zoo::na.approx(hall_dat$discharge_m3s/max(hall_dat$discharge_m3s, na.rm = T), na.rm = F)
temp = zoo::na.approx(hall_dat$water_temp_C, na.rm = F) + 273
litter = hall_dat$litter

# simulate GPP
P_hall <- numeric()
P_hall[1] = 0.5
for(i in 2:N){
  P_hall[i] = 0.5 * P_hall[i-1] + 0.8 * light[i] + rnorm(1,0, 0.05)
}
P_hall <- P_hall * .75
# define parameters
K20 = .01  # Heterotrophic respiration at 20 C
beta = 0.2   # Percent removal of organic carbon from max storm
sigma_proc = 0.22
sigma_obs = 0.16 

# Constants
E = 0.63              # activation energy for heterotrophic respiration
k_b = 8.6173 * 10^-5  # Boltzmann's constant in eV/K
AR = 0.5              # the fraction of GPP respired by autotrophs

# Process model
C_hall = numeric()
R_hall = numeric()
R_hall_obs = numeric()
K_t = numeric()
C_hall[1] = 200 # initial accessible carbon storage in stream
K_t[1] = K20 * exp(-E/k_b *(1/temp[1] - 1/293))
R_hall[1] = -AR * P_hall[1] - K_t[1] * C_hall[1]

for(i in 2:N){
  C_hall[i] = exp(rnorm(1, log((C_hall[i-1] + litter[i] + R_hall[i-1] + P_hall[i-1])*(1-beta*Q[i])), sigma_proc))
  K_t[i] = K20 * exp(-E/k_b * (1/temp[i] - 1/293))
  R_hall[i] = -AR * P_hall[i] - K_t[i]*C_hall[i]
}

R_hall_obs = rnorm(N, R_hall, sigma_obs)

data.frame(date = hall_dat$date, P = P_hall, R = R_hall_obs, C = C_hall) %>%
  pivot_longer(-date, names_to = 'var', values_to = 'value') %>%
  ggplot(aes(date, value, col = var)) +
  geom_line()+
  facet_wrap(.~var, scales = 'free_y', nrow = 3)
```

### Metabolism hindcast:

```{r}
hall <- hall_dat %>%
  mutate(ER = R_hall_obs, 
         GPP = P_hall,
         C = C_hall) %>%
  group_by(doy) %>%
  summarize(across(-date, mean, na.rm = T))%>%
  ungroup() %>%
  mutate(era = "1969")

comp <- cbp_ests %>%
  mutate(doy = as.numeric(format(date, '%j'))) %>%
  group_by(doy) %>%
  summarize(across(-date, mean, na.rm = T)) %>%
  ungroup() %>%
  mutate(era = "2019") %>%
  rename(GPP = GPP_measured, ER = ER_modeled, C = C_modeled) %>%
  bind_rows(hall) %>%
  pivot_longer(cols = c('GPP', 'ER', 'C'), names_to = 'variable', values_to = 'val')

comp %>%
  ggplot(aes(doy, val, col = era)) +
  geom_line()+
  facet_wrap(.~variable, scales = 'free_y', nrow = 3)
```## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
