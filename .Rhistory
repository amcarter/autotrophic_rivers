temp_C = temp.water) %>%
mutate(across(c(-sitecode, -long_name, -date, -DOY), zoo::na.approx, na.rm = F),
# tau_mgm2 = 10^3 * depth * slope,
light = light/max(light))
ss$litter <- calc_litter_from_LAI(ss)
ss
auto <- ss[1:365,]
auto %>%
select(date, temp = temp_C, discharge, GPP, ER, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, nrow = 4, scales = 'free_y')
ss %>%
select(date, temp = temp_C, discharge, GPP, ER, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, nrow = 4, scales = 'free_y')
auto <- ss[366:730,]
ss %>%
select(date, temp = temp_C, discharge, GPP, ER, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, nrow = 4, scales = 'free_y')
auto %>%
select(date, temp = temp_C, discharge, GPP, ER, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, nrow = 4, scales = 'free_y')
slope <- read_csv('C:/Users/alice.carter/git/nhc_50yl/data/siteData/NHCsite_metadata.csv') %>%
select(site = sitecode, slope = slope_wbx, width = width_mar_m)
dat <- read_csv('C:/Users/alice.carter/git/nhc_50yl/data/metabolism/metabolism_and_drivers.csv') %>%
left_join(slope, by = 'site')
# define litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d
wbp_miss <- dat %>%
filter(site == 'WBP') %>%
arrange(date) %>%
mutate(ER = case_when(discharge > 10 ~ NA_real_, TRUE ~ ER),
GPP = case_when(discharge > 10 ~ NA_real_, TRUE ~ GPP)) %>%
mutate(across(c(-date, -ER, -site), zoo::na.approx, na.rm = F),
litter = calc_litter(1000 * max(LAI, na.rm = T)/mean(width, na.rm = T),
LAI),
logQ = log(discharge),
temp_C = temp.water,
tau_mgm2 = 10^3 * depth * slope) %>%
slice(-1) %>%
filter(!is.na(GPP))
wbp <- mutate(wbp_miss, ER = zoo::na.approx(ER), na.rm = F) %>%
filter(!is.na(ER)) %>%
group_by(date) %>%
summarize(across(-site, mean, na.rm = T))
dat
# define litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d
wbp_miss <- dat %>%
filter(site == 'WBP') %>%
arrange(date) %>%
mutate(ER = case_when(discharge > 10 ~ NA_real_, TRUE ~ ER),
GPP = case_when(discharge > 10 ~ NA_real_, TRUE ~ GPP)) %>%
mutate(across(c(-date, -ER, -site), zoo::na.approx, na.rm = F),
litter = calc_litter_from_LAI(dat),
logQ = log(discharge),
tau_mgm2 = 10^3 * depth * slope,
temp_C = temp.water) %>%
slice(-1) %>%
filter(!is.na(GPP))
# define litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d
wbp_miss <- dat %>%
filter(site == 'WBP') %>%
arrange(date) %>%
mutate(ER = case_when(discharge > 10 ~ NA_real_, TRUE ~ ER),
GPP = case_when(discharge > 10 ~ NA_real_, TRUE ~ GPP)) %>%
mutate(across(c(-date, -ER, -site), zoo::na.approx, na.rm = F),
logQ = log(discharge),
tau_mgm2 = 10^3 * depth * slope,
temp_C = temp.water) %>%
slice(-1) %>%
filter(!is.na(GPP))
wbp_miss$litter = calc_litter_from_LAI(wbp_miss)
wbp_miss
wbp <- mutate(wbp_miss, ER = zoo::na.approx(ER), na.rm = F) %>%
filter(!is.na(ER)) %>%
group_by(date) %>%
summarize(across(-site, mean, na.rm = T))
wbp %>%
select(date, temp_C, logQ, light = PAR_surface, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, ncol = 1, scales = 'free_y')
auto <- ss[366:730,]
# define litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d
wbp_miss <- dat %>%
filter(site == 'WBP') %>%
arrange(date) %>%
mutate(ER = case_when(discharge > 10 ~ NA_real_, TRUE ~ ER),
GPP = case_when(discharge > 10 ~ NA_real_, TRUE ~ GPP)) %>%
mutate(across(c(-date, -ER, -site), zoo::na.approx, na.rm = F),
logQ = log(discharge),
tau_mgm2 = 10^3 * depth * slope,
temp_C = temp.water,
light = PAR_surface/max(PAR_surface)) %>%
slice(-1) %>%
filter(!is.na(GPP))
wbp_miss$litter = calc_litter_from_LAI(wbp_miss)
wbp <- mutate(wbp_miss, ER = zoo::na.approx(ER), na.rm = F) %>%
filter(!is.na(ER)) %>%
group_by(date) %>%
summarize(across(-site, mean, na.rm = T))
wbp %>%
select(date, temp_C, logQ, light = PAR_surface, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, ncol = 1, scales = 'free_y')
wbp %>%
select(date, temp_C, logQ, light, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, ncol = 1, scales = 'free_y')
# define litterfall to be 20 days from Oct 5th - 24th with the total annual litter = 500 gC/m2/y, so daily litterfall = 25 gC/m2/d
wbp_miss <- dat %>%
filter(site == 'WBP') %>%
arrange(date) %>%
mutate(ER = case_when(discharge > 10 ~ NA_real_, TRUE ~ ER),
GPP = case_when(discharge > 10 ~ NA_real_, TRUE ~ GPP)) %>%
mutate(across(c(-date, -ER, -site), zoo::na.approx, na.rm = F),
logQ = log(discharge),
tau_mgm2 = 10^3 * depth * slope,
temp_C = temp.water,
light = PAR_surface/max(PAR_surface),
Q = discharge/max(discharge)) %>%
slice(-1) %>%
filter(!is.na(GPP))
wbp_miss$litter = calc_litter_from_LAI(wbp_miss)
wbp <- mutate(wbp_miss, ER = zoo::na.approx(ER), na.rm = F) %>%
filter(!is.na(ER)) %>%
group_by(date) %>%
summarize(across(-site, mean, na.rm = T))
wbp %>%
select(date, temp_C, logQ, light, LAI, litter) %>%
pivot_longer(-date, names_to = 'variable', values_to = 'value') %>%
ggplot(aes(date, value, col = variable)) +
geom_line() +
facet_wrap(.~variable, ncol = 1, scales = 'free_y')
ss <- wbp %>%
mutate(C = 0.5,
R = 0.5,
R_obs = ER) %>%
select(date, P = GPP, ER, R_obs, R, light, Q, temp_C, litter, C)
ndays <- nrow(ss) # number of days
# define parameters
C0 = 100       # Initial organic C
K20 = .01        # Heterotrophic respiration at 20 C
beta_s = 0.8   # Percent removal of organic carbon from max storm
sigma_proc = .02 # lognormally distributed, so this is a % error
sigma_obs = 0.08
# Constants
E_a = 0.63            # activation energy for heterotrophic respiration
k_b = 8.6173 * 10^-5  # Boltzmann's constant in eV/K
ARf = 0.44            # the fraction of GPP respired by autotrophs
ss$K = K20 * exp(-E_a/k_b *(1/(ss$temp_C+273) - 1/293))
Chat = numeric()
Chat[1] = C0
ss$C[1] = exp(rnorm(1, log(C0), sigma_proc))
ss$AR = -ARf * ss$P
ss$R[1] = ss$AR[1] - ss$K[1] * ss$C[1]
for(i in 2:ndays){
Chat[i] = (Chat[i-1] + ss$litter[i] + ss$R[i-1] + ss$P[i-1])*
(1-beta_s*ss$Q[i])
ss$C[i] = exp(rnorm(1, log(Chat[i]), sigma_proc))
ss$R[i] = ss$AR[i] - ss$K[i]*ss$C[i]
}
# observation model:
ss$R_obs = rnorm(ndays, ss$R, sigma_obs)
ss %>% select(date, P, Q, R, C, litter )%>%
pivot_longer( -date, names_to = 'var', values_to = 'value') %>%
ggplot(aes(date, value, col = var)) +
geom_line()+
facet_wrap(.~var, scales = 'free_y', ncol = 2)
mod <- readRDS('SAM/stan/fits/detC_logpi_1_wbp_sim.rds')
print(mod, pars = c('beta_s', 'sigma_obs', 'sigma_proc', 'K_20'))
traceplot(mod, ncol = 2, pars = c('beta_s', 'sigma_obs', 'sigma_proc', 'K_20'))
plot_post_sim(mod, pars = c('beta_s', 'sigma_obs', 'sigma_proc', 'K_20'),
vals = c( beta_s, sigma_obs, sigma_proc*10, K20*100),
xlim = c(0,1.5))
fit <- summary(mod)
modC <- fit$summary[4:(3+ndays),1]
modC_sd <- fit$summary[4:(3+ ndays),3]
plot(ss$date, ss$C, type = 'l', ylab = 'Carbon (g/m2)', xlab = 'Date')
points(ss$date, modC, col = 'steelblue', pch = 19)
polygon(c(wbp$date, rev(wbp$date)), c(modC - modC_sd, rev(modC + modC_sd)),
col = alpha('steelblue', 0.3), border = NA)
legend('topleft', c('underlying state', 'modeled'),
lty = c(1,0), pch = c(NA,19), col = c('black', 'steelblue'), bty = 'n')
ss$K = calc_rate_coef(ss$temp_C, K_20 = K20)
wbp_mod <- readRDS('SAM/stan/fits/detC_logpi_1_wbp.rds')
print(wbp_mod, pars = c('beta_s', 'sigma_obs', 'sigma_proc'))
fit <- summary(wbp_mod)
fit
fit$summary
# extract parameters
K20_mean <- fit$summary[4, 1]
K20_sd <- fit$summary[4, 3]
beta_s_mean <- fit$summary[1,1]
beta_s_sd <- fit$summary[1,3]
sigma_obs_mean = fit$summary[3,1]
sigma_obs_sd <- fit$summary[3,3]
sigma_proc_mean <- fit$summary[2,1]
sigma_proc_sd <- fit$summary[2,3]
# extract parameters
K20_mean <- fit$summary[4, 1]
K20_sd <- fit$summary[4, 3]
beta_s_mean <- fit$summary[1,1]
beta_s_sd <- fit$summary[1,3]
sigma_obs_mean = fit$summary[3,1]
sigma_obs_sd <- fit$summary[3,3]
sigma_proc_mean <- fit$summary[2,1]
sigma_proc_sd <- fit$summary[2,3]
# predict data
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean)
Chat = numeric()
Chat[1] = C0
ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean))
ss$C_pred[1]
ss$R_pred[1] = ss$AR[1] - ss$K_pred[1] * ss$C_pred[1]
for(i in 2:ndays){
Chat[i] = (Chat[i-1] + ss$litter[i] + ss$R_pred[i-1] + ss$P[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean))
ss$R_pred[i] = ss$AR[i] - ss$K_pred[i]*ss$C_pred[i]
}
warnings()
sigma_proc_mean
sigma_proc
# predict data
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
Chat = numeric()
Chat[1] = C0
ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean/10))
ss$R_pred[1] = ss$AR[1] - ss$K_pred[1] * ss$C_pred[1]
for(i in 2:ndays){
Chat[i] = (Chat[i-1] + ss$litter[i] + ss$R_pred[i-1] + ss$P[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean/10))
ss$R_pred[i] = ss$AR[i] - ss$K_pred[i]*ss$C_pred[i]
}
# observation model:
ss$R_mod = rnorm(ndays, ss$R_pred, sigma_obs_mean)
ss
modC <- fit$summary[5:(ndays+5),1]
modC
modC <- fit$summary[5:(ndays+4),1]
modC
wbp_ests <- ss %>%
select(C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_) %>%
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
wbp_ests <- ss %>%
select(C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
ss$C_modeled <- fit$summary[5:(ndays+4),1]
wbp_ests <- ss %>%
select(C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
wbp_ests
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value')
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est))
wbp_ests <- ss %>%
select(date, C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
ss <- auto %>%
mutate(light = light/max(light),
Q = discharge/max(discharge),
C = 0.5,
R = 0.5,
R_obs = ER) %>%
select(date, P = GPP, ER, R_obs, R, light, Q, temp_C, litter, C)
clack_mod <- readRDS('SAM/stan/fits/detC_logpi_1_clack.rds')
fit <- summary(clack_mod)
fit <- summary(clack_mod)
# posterior predictive check
# extract parameters
K20_mean <- fit$summary[4, 1]
fit
# posterior predictive check
# extract parameters
K20_mean <- fit$summary[4, 1]
K20_sd <- fit$summary[4, 3]
beta_s_mean <- fit$summary[1,1]
beta_s_sd <- fit$summary[1,3]
sigma_obs_mean = fit$summary[3,1]
sigma_obs_sd <- fit$summary[3,3]
sigma_proc_mean <- fit$summary[2,1]
sigma_proc_sd <- fit$summary[2,3]
# predict data
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
Chat = numeric()
Chat[1] = C0
ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean/10))
ss$R_pred[1] = ss$AR[1] - ss$K_pred[1] * ss$C_pred[1]
ss$AR <- -ss$P * AR_f
ss$AR <- -ss$P * ARf
ss$R_pred[1] = ss$AR[1] - ss$K_pred[1] * ss$C_pred[1]
for(i in 2:ndays){
Chat[i] = (Chat[i-1] + ss$litter[i] + ss$R_pred[i-1] + ss$P[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean/10))
ss$R_pred[i] = ss$AR[i] - ss$K_pred[i]*ss$C_pred[i]
}
print(clack_mod, pars = c('beta_s', 'sigma_obs', 'sigma_proc'))
# observation model:
ss$R_mod = rnorm(ndays, ss$R_pred, sigma_obs_mean)
ndays <- nrow(ss)
# observation model:
ss$R_mod = rnorm(ndays, ss$R_pred, sigma_obs_mean)
ss$C_modeled <- fit$summary[5:(ndays+4),1]
clack_ests <- ss %>%
select(date, C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
clack_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
clack_mod <- readRDS('SAM/stan/fits/SAM5_detC_logpi_clack.rds')
print(clack_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
traceplot(clack_mod, ncol = 1, pars=c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
plot(clack_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
ndays <- nrow(ss)
fit <- summary(clack_mod)
fit
beta_p_mean <- fit$summary[2,1]
beta_p_sd <- fit$summary[2,3]
w_mean <- fit$summary[3:7,1]
w_mean
K20_mean = 1
# predict data
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
sigma_proc_mean
clack_mod <- readRDS('SAM/stan/fits/SAM5_detC_logpi_clack.rds')
print(clack_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
traceplot(clack_mod, ncol = 1, pars=c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
plot(clack_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
ndays <- nrow(ss)
fit <- summary(clack_mod)
# posterior predictive check
# extract parameters
K20_mean = 1
# K20_mean <- fit$summary[4, 1]
# K20_sd <- fit$summary[4, 3]
beta_s_mean <- fit$summary[1,1]
beta_s_sd <- fit$summary[1,3]
beta_p_mean <- fit$summary[2,1]
beta_p_sd <- fit$summary[2,3]
w_mean <- fit$summary[3:7,1]
sigma_obs_mean = fit$summary[9,1]
sigma_obs_sd <- fit$summary[9,3]
sigma_proc_mean <- fit$summary[8,1]
sigma_proc_sd <- fit$summary[8,3]
ss$C_modeled <- fit$summary[9:(ndays+8),1]
# predict data
ss$Pant_pred = ss$P
for (i in (nweights+1):ndays){
Pvec <- numeric(nweights)
for(j in 1:nweights){
Pvec[j] <- w_mean[j]*ss$P[i-j]
}
ss$Pant_pred[i]<-sum(Pvec)
}
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
nweights = 5
for (i in (nweights+1):ndays){
Pvec <- numeric(nweights)
for(j in 1:nweights){
Pvec[j] <- w_mean[j]*ss$P[i-j]
}
ss$Pant_pred[i]<-sum(Pvec)
}
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
Chat = numeric()
Chat[1] = C0
ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean/10))
ss$AR = -ARf * ss$P
ss$HR[1] =  - ss$K_pred[1] * ss$C_pred[1]
ss$HR <- ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean/10))
ss$AR = -ARf * ss$P
ss$HR[1] =  - ss$K_pred[1] * ss$C_pred[1]
for(i in 2:ndays){
Chat[i] = (C_pred[i-1] + ss$litter[i] + ss$HR[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean/10))
ss$HR[i] = - ss$K_pred[i]*ss$C_pred[i]
}
for(i in 2:ndays){
Chat[i] = (ss$C_pred[i-1] + ss$litter[i] + ss$HR[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean/10))
ss$HR[i] = - ss$K_pred[i]*ss$C_pred[i]
}
ss$R_pred = ss$AR + ss$HR - beta_p_mean * ss$Pant_pred
# observation model:
ss$R_mod = rnorm(ndays, ss$R_pred, sigma_obs_mean)
clack_ests <- ss %>%
select(date, C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
clack_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
wbp_mod <- readRDS('SAM/stan/fits/SAM5_detC_logpi_wbp.rds')
print(wbp_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
traceplot(wbp_mod, ncol = 1, pars=c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
plot(wbp_mod, pars = c('beta_p', 'beta_s', 'w', 'sigma_obs', 'sigma_proc'))
fit <- summary(wbp_mod)
ss <- wbp %>%
mutate(C = 0.5,
HR = 0.5,
R = 0.5,
R_obs = ER) %>%
select(date, P = GPP, ER, R_obs,HR,  R, light, Q, temp_C, litter, C)
ndays <- nrow(ss)
# posterior predictive check
# extract parameters
K20_mean = 1
# K20_mean <- fit$summary[4, 1]
# K20_sd <- fit$summary[4, 3]
beta_s_mean <- fit$summary[1,1]
beta_s_sd <- fit$summary[1,3]
beta_p_mean <- fit$summary[2,1]
beta_p_sd <- fit$summary[2,3]
w_mean <- fit$summary[3:7,1]
sigma_obs_mean = fit$summary[9,1]
sigma_obs_sd <- fit$summary[9,3]
sigma_proc_mean <- fit$summary[8,1]
sigma_proc_sd <- fit$summary[8,3]
ss$C_modeled <- fit$summary[9:(ndays+8),1]
# predict data
ss$Pant_pred = ss$P
nweights = 5
for (i in (nweights+1):ndays){
Pvec <- numeric(nweights)
for(j in 1:nweights){
Pvec[j] <- w_mean[j]*ss$P[i-j]
}
ss$Pant_pred[i]<-sum(Pvec)
}
ss$K_pred = calc_rate_coef(ss$temp_C, K_20 = K20_mean/100)
Chat = numeric()
Chat[1] = C0
ss$HR <- ss$C_pred <- ss$R_pred <- NA_real_
ss$C_pred[1] = exp(rnorm(1, log(C0), sigma_proc_mean/10))
ss$AR = -ARf * ss$P
ss$HR[1] =  - ss$K_pred[1] * ss$C_pred[1]
for(i in 2:ndays){
Chat[i] = (ss$C_pred[i-1] + ss$litter[i] + ss$HR[i-1])*
(1-beta_s_mean*ss$Q[i])
ss$C_pred[i] = exp(rnorm(1, log(Chat[i]), sigma_proc_mean/10))
ss$HR[i] = - ss$K_pred[i]*ss$C_pred[i]
}
ss$R_pred = ss$AR + ss$HR - beta_p_mean * ss$Pant_pred
# observation model:
ss$R_mod = rnorm(ndays, ss$R_pred, sigma_obs_mean)
wbp_ests <- ss %>%
select(date, C_modeled, ER_modeled = R_mod,
ER_measured = ER, GPP_measured = P) %>%
mutate(GPP_modeled = NA_real_, C_measured = NA_real_)
wbp_ests%>%
pivot_longer(ends_with(c("_measured", "_modeled")), names_to = c('variable', 'est'),
names_sep = '_', values_to = 'value') %>%
ggplot(aes(date, value, col = est)) +
geom_line() +
facet_wrap(.~variable, scales = 'free', ncol = 1)
